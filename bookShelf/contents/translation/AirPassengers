{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A comprehensive beginner’s guide to create a Time Series Forecast (with Codes in Python and R)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## リンク\n",
    "\n",
    "[サイトページ](https://www.analyticsvidhya.com/blog/2016/02/time-series-forecasting-codes-python/)\n",
    "\n",
    "[web魚拓](https://megalodon.jp/2020-1009-0951-57/https://www.analyticsvidhya.com:443/blog/2016/02/time-series-forecasting-codes-python/)\n",
    "\n",
    "## 概要\n",
    "\n",
    "- 時系列予測を作成する手順を学びます。\n",
    "- Dickey-Fuller検定とARIMA (Autoregressive, moving average)モデルにも焦点を当てています。\n",
    "- pythonでの実装と同様に、理論的な概念を学びます。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 序文\n",
    "時系列（Time Series、以降TS）は、データサイエンスの世界ではあまり知られていないスキルの一つと考えられています。私は時系列問題を解決するための基本的な手順を学ぶために旅に出ましたが、ここではあなたと同じことを共有しています。これらは間違いなく、あなたが取り上げる任意の将来のプロジェクトでまともなモデルを取得するのに役立ちます\n",
    "\n",
    "この記事を読む前に、[A Complete Tutorial on Time Series Modeling in R](https://www.analyticsvidhya.com/blog/2015/12/complete-tutorial-time-series-modeling/)を読んで、[無料のTime Series Forecastingコース](http://courses.analyticsvidhya.com/courses/creating-time-series-forecast-using-python?utm_source=blog&utm_medium=TimeSeriesForecastComprehensivearticle)を受講することを強くお勧めします。これは基本的な概念に焦点を当てており、私はPythonのコードと一緒に問題を解決する際にこれらの概念をエンドツーエンドで使用することに焦点を当てています。Rでの時系列のための多くのリソースは存在しますが、[Pythonのためのリソース](http://courses.analyticsvidhya.com/courses/introduction-to-data-science-2?utm_source=blog&utm_medium=TimeSeriesForecastComprehensivearticle)は非常に少ないので、この記事ではPythonを使用します。\n",
    "\n",
    "\n",
    "私たちの旅は、次のようなステップを経ることになるでしょう。\n",
    "\n",
    "1. 時系列を特別なものにしているのは何か？\n",
    "2. pandasでの時系列の読み込みと処理\n",
    "3. 時系列の定常性を確認するには？\n",
    "4. 時系列の定常性を確認するには？\n",
    "5. 時系列を予測する\n",
    "\n",
    "\n",
    "## 1.何が時系列を特徴付けるか？\n",
    "\n",
    "その名が示すように、TSは一定の時間間隔で収集されたデータ点の集合です。これらは、将来を予測したり、他の形式の分析を行うために、長期的な傾向を決定するために分析されます。しかし、TSは通常の回帰問題と何が違うのでしょうか？次の2つのことがあります。\n",
    "\n",
    "\n",
    "1. **時間依存性**：したがって、観測者が独立しているという線形回帰モデルの基本的な仮定は、このケースでは保持されない。\n",
    "\n",
    "2. **季節性**：増加または減少傾向とともに、ほとんどのTSは、ある種の季節性傾向、すなわち、特定の時間枠に固有の変動を持っています。たとえば、ウールのジャケットの販売が時間の経過とともに変化するのを見ると、冬の季節には必ずより高い販売価格もしくは販売量が見られるでしょう。\n",
    "\n",
    "TSには固有の特徴があるため、TSの分析には様々なステップがあります。これらについては以下で詳しく説明します。まず、PythonでTSオブジェクトを読み込むことから始めましょう。ここでは人気のある[AirPassengers](https://www.analyticsvidhya.com/wp-content/uploads/2016/02/AirPassengers.csv)のデータセットを使用します。\n",
    "\n",
    "この記事の目的は、一般的にTSで使用される様々なテクニックに慣れることであることに注意してください。ここで考えた例は説明のためのものであり、私は幅広いトピックをカバーすることに焦点を当て、あまり正確な予測はしません。\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. pandasで時系列の読み込みと処理\n",
    "\n",
    "pandasには TSオブジェクトを扱うための専用ライブラリがあり、特に datatime64[ns] クラスは時間情報を保存し、いくつかの操作を高速に実行できるようにしてくれます。まずは必要なライブラリを起動してみましょう。\n",
    "データは1949年１月〜1960年12月までの月毎の飛行機の乗客数のデータセットであるAirport Passengersです。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import pandas as pd\n",
    "# import numpy as np\n",
    "# import matplotlib.pyplot as plt\n",
    "# import warnings\n",
    "\n",
    "\n",
    "# warnings.simplefilter('ignore')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Data Types:\n",
      "Month          object\n",
      "#Passengers     int64\n",
      "dtype: object\n",
      "\n",
      " Data Shape:\n",
      "(144, 2)\n",
      "\n",
      " Data Head:\n",
      "     Month  #Passengers\n",
      "0  1949-01          112\n",
      "1  1949-02          118\n",
      "2  1949-03          132\n",
      "3  1949-04          129\n",
      "4  1949-05          121\n"
     ]
    }
   ],
   "source": [
    "# # さて、データセットをロードして、いくつかの初期の行と列のデータ型を見てみましょう。\n",
    "# data_path = './data/AirPassengers.csv'\n",
    "# data = pd.read_csv(data_path)\n",
    "# print ('\\n Data Types:')\n",
    "# print (data.dtypes)\n",
    "# print ('\\n Data Shape:')\n",
    "# print (data.shape)\n",
    "# print ('\\n Data Head:')\n",
    "# print (data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Parsed Data:\n",
      "            #Passengers\n",
      "Month                  \n",
      "1949-01-01          112\n",
      "1949-02-01          118\n",
      "1949-03-01          132\n",
      "1949-04-01          129\n",
      "1949-05-01          121\n"
     ]
    }
   ],
   "source": [
    "# # データには、特定の月とその月に旅行した乗客の数が含まれています。データを時系列として読み込むためには, read_csvコマンドに特別な引数を渡す必要があります.\n",
    "# dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m')\n",
    "# data = pd.read_csv(data_path, parse_dates=['Month'], index_col='Month',date_parser=dateparse)\n",
    "# print ('\\n Parsed Data:')\n",
    "# print (data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "引数を一つずつ理解していきましょう。\n",
    "\n",
    "- **parse_dates**：これは日付と時刻の情報を格納するカラムを指定します。上で言ったように、カラム名は'Month'です。\n",
    "\n",
    "- **index_col**：TSデータにPandasを使用する際の重要な考え方は、インデックスが日付時間情報を表す変数でなければならないということです。そのため、この引数は'Month'カラムをインデックスとして使用するようにpandasに指示します。\n",
    "\n",
    "- **date_parser**:これは入力文字列をdatetime変数に変換する関数を指定します。デフォルトでは、pandasは'YYYY-MM-DD HH:MM:SS'形式でデータを読み込みます。もしデータがこのフォーマットでない場合は、フォーマットを手動で定義しなければなりません。この目的のために、ここで定義されているdataparse関数に似たものを使用することができます。\n",
    "\n",
    "これで、データのインデックスがTimeオブジェクト、列が#Passengersであることがわかります。次のコマンドでインデックスのデータ型を照合することができます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['1949-01-01', '1949-02-01', '1949-03-01', '1949-04-01',\n",
       "               '1949-05-01', '1949-06-01', '1949-07-01', '1949-08-01',\n",
       "               '1949-09-01', '1949-10-01',\n",
       "               ...\n",
       "               '1960-03-01', '1960-04-01', '1960-05-01', '1960-06-01',\n",
       "               '1960-07-01', '1960-08-01', '1960-09-01', '1960-10-01',\n",
       "               '1960-11-01', '1960-12-01'],\n",
       "              dtype='datetime64[ns]', name='Month', length=144, freq=None)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data.index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "indexのデータ型dtype='datetime[ns]' となっていることに注目してください。\n",
    "個人的な好みとして、私はTSを使用するたびに列の名前を参照するのを防ぐために、列をSeriesオブジェクトに変換します。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Month\n",
       "1949-01-01    112\n",
       "1949-02-01    118\n",
       "1949-03-01    132\n",
       "1949-04-01    129\n",
       "1949-05-01    121\n",
       "Name: #Passengers, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ts = data['#Passengers']\n",
    "# ts.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "先に進む前に、TSデータのインデックス作成のテクニックについて説明します。まず、Seriesオブジェクトで特定の値を選択することから始めましょう。これは以下の2つの方法で行うことができます。\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "112\n",
      "112\n"
     ]
    }
   ],
   "source": [
    "# #1. 特定のindexを文字列で指定します。\n",
    "# print(ts['1949-01-01'])\n",
    "\n",
    "# #2. datetime ライブラリをインポートして 'datetime' 関数を使用します。\n",
    "# from datetime import datetime\n",
    "# print(ts[datetime(1949,1,1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "どちらも、以前の出力からも確認できる値'112'を返すことになります。1949年5月までのすべてのデータが欲しいとします。これには2つの方法があります。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Month\n",
       "1949-01-01    112\n",
       "1949-02-01    118\n",
       "1949-03-01    132\n",
       "1949-04-01    129\n",
       "1949-05-01    121\n",
       "Name: #Passengers, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# #1. 範囲を指定します:\n",
    "# ts['1949-01-01':'1949-05-01']\n",
    "\n",
    "# #2. ':' を使用して始端から指定日までを指定します:\n",
    "# ts[:'1949-05-01']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ここで注意すべき点が2つあります。\n",
    "\n",
    "1. 数値インデキシングとは異なり、ここでは終了インデックスが含まれています。例えば、リストにa[:5]というインデックスを付けた場合、インデックス-[0,1,2,3,4]の値を返すことになります。しかし、ここではインデックス '1949-05-01' が出力に含まれています。\n",
    "\n",
    "2. インデックスをソートしないと範囲が機能しません。インデックスをランダムにシャッフルした場合、これは動作しません。\n",
    "\n",
    "別の例として、1949年のすべての値が必要な場合を考えてみましょう。これは次のようにすることができます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Month\n",
       "1949-01-01    112\n",
       "1949-02-01    118\n",
       "1949-03-01    132\n",
       "1949-04-01    129\n",
       "1949-05-01    121\n",
       "1949-06-01    135\n",
       "1949-07-01    148\n",
       "1949-08-01    148\n",
       "1949-09-01    136\n",
       "1949-10-01    119\n",
       "1949-11-01    104\n",
       "1949-12-01    118\n",
       "Name: #Passengers, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ts['1949']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "月の部分が省略されています。同様に、特定の月のすべての日の場合は、日の部分を省略することができます。\n",
    "\n",
    "さて、TSを分析する上で移動することができます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. どのようにして時系列の定常性を判定するか？\n",
    "\n",
    "平均や分散などの統計的特性が時間の経過とともに一定である場合、TSは定常であると言われています。しかし、なぜそれが重要なのでしょうか？ほとんどのTSモデルは、TSが定常であるという前提で動作します。直感的には、あるTSがある時間内に特定の振る舞いをしている場合、将来的にも同じ振る舞いをする確率が非常に高いということがわかります。また、定常系列に関連する理論は、非定常系列に比べて成熟しており、実装が容易です。\n",
    "\n",
    "定常性は非常に厳しい基準で定義されています。しかし、実用的な目的のためには、次のような統計的特性が一定であれば、その系列は定常であると仮定することができます。\n",
    "\n",
    "1. 平均が一定\n",
    "2. 分散が一定\n",
    "3. 自己共分散が時間に依存しない\n",
    "\n",
    "[この記事](https://www.analyticsvidhya.com/blog/2015/12/complete-tutorial-time-series-modeling/)で明確に定義されているので、詳細は省きます。それでは、定常性をテストする方法に移りましょう。まず第一に、データを簡単にプロットして視覚的に分析することです。データは以下のコマンドでプロットすることができます。\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fig, axes = plt.subplots(figsize=(9,6))\n",
    "# plt.plot(ts);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "データには季節的な変動もありますが、全体的に増加傾向にあることは明らかです。しかし、必ずしもそのような視覚的な推論ができるとは限りません（後ほどそのようなケースを見てみましょう）。そこで、より正式には、以下のような方法で定常性を確認することができます。\n",
    "\n",
    "1. ローリング統計を可視化します。移動平均や移動分散をプロットして、それが時間とともに変化するかどうかを見ることができます。移動平均/分散とは、任意の瞬間't'において、昨年の平均/分散、すなわち過去12ヶ月の平均/分散を取ることを意味します。つまりはこれも視覚的なテクニックです。\n",
    "\n",
    "\n",
    "2. ディッキー・フラー検定. これは、定常性をチェックするための統計的検定の1つです。ここでは、帰無仮説は、TSが非定常であるということです。検定結果は，検定統計量と信頼度の差の臨界値で構成される．検定統計量」が「臨界値」よりも小さければ、帰無仮説を棄却し、系列が定常であると言えます。詳細は[こちらの記事](https://www.analyticsvidhya.com/blog/2015/12/complete-tutorial-time-series-modeling/)を参照してください。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "この時点では、これらの概念はあまり直感的には聞こえないかもしれません。参照先の記事を読むことをお勧めします。理論的な統計学に興味があるのであれば、**Brockwell and DavisのIntroduction to Time Series and Forecasting**を参照してください。この本は少し統計学的な内容が多いですが、行間を読むスキルがあれば、概念を理解して統計学に触れることができます。\n",
    "\n",
    "静止性のチェックに戻りますが、我々はDickey-Fuller検定の結果と一緒にローリング統計量のプロットを多く使用するでしょう。平均に近い単位を保つために、分散の代わりに標準偏差をプロットしたことに注意してください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import statsmodels\n",
    "# from statsmodels.tsa.stattools import adfuller\n",
    "\n",
    "\n",
    "# def test_stationarity(ts):\n",
    "    \n",
    "#     # ローリング統計の決定\n",
    "#     rolmean = pd.rolling_mean(ts, window=12)\n",
    "#     rolstd = pd.rolling_std(ts, window=12)\n",
    "    \n",
    "#     # ローリング統計のプロット\n",
    "#     arig = plt.plot(ts, color='blue', label='Original')\n",
    "#     mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n",
    "#     std = plt.plot(rolstd, color='black', label='Rolling Std')\n",
    "#     plt.legend(loc='best')\n",
    "#     plt.title('Rolling Mean & Standard Deviation')\n",
    "#     plt.show(block=False)\n",
    "    \n",
    "#     # ディッキーフラー検定\n",
    "#     print('Results of Dickey-Fuller Test')\n",
    "#     dftest = adfuller(ts, autolog='AIC')\n",
    "#     dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\n",
    "#     for key, value in dftest[4].items():\n",
    "#         dfoutput['Critical Value (%s)'%key] = value\n",
    "#     print(dfoutput)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7.5 64-bit ('3.7.5': pyenv)",
   "language": "python",
   "name": "python37564bit375pyenva7ba0993404d4e8f9a8d177ae4693875"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5-final"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}